//Dylan Mendoza
//Caleb Lindner
//Hunter Robinson

#include "DHT.h"
#include <LiquidCrystal.h>
#include <Stepper.h>

#define DHTTYPE DHT11
#define DHTPIN 12
#define STEPS 32

DHT dht(DHTPIN, DHTTYPE);
Stepper stepper(STEPS, 30,32,31,33);

//Pin I/O
const int rs = 11; //resgiter
const int en = 10; //register
const int d4 = 22; //register
const int d5 = 23; //register
const int d6 = 24; //register
const int d7 = 25; //register
const int fan =13; //register
const int power = 2; //register
const int error = 5; //register
const int on = 6; //resgiter
const int off = 4; //register
const int level = A0; //register
const int angle = A1; //register

//Variables
float temp;
float hum;
int powerStateCurrent = 0;
int powerStateLast;
int systemState = 1;
float water = 0;
int Pval = 0;
int potVal = 0;

LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

void setup() {
  // put your setup code here, to run once:
pinMode(fan, OUTPUT); //register
pinMode(power, INPUT); //register

Serial.begin(9600); //register

stepper.setSpeed(200);
lcd.begin(16, 2);
dht.begin();
}

void loop() {

  //Stepper motor control portion
  potVal = map(analogRead(A1),0,1024,0,500);
    if (potVal>Pval){
       stepper.step(5);
    }
    if (potVal<Pval){
      stepper.step(-5);
    }
Pval = potVal;
  

  water = analogRead(level); //collect water level in cooler
  Serial.println(water);

  //LCD Display Portion, takes readings and then writes temp and hummidity to lcd
  temp = dht.readTemperature();
  hum = dht.readHumidity();
  lcd.setCursor(0,0);
  lcd.print("Temp C: ");
  lcd.print(temp,2);
  lcd.setCursor(0,1);
  lcd.print("Humidity: ");
  lcd.print(hum, 2);  

  //turns fan on or off depending on read temperature from the above portion
  if(temp>24){
    digitalWrite(fan,HIGH);
  }else if(temp<20){
    digitalWrite(fan,LOW);
  }
  

  //error portion, if there is an error happening, it is detected here
  if(isnan(temp) || isnan(hum)|| water<300){
   Serial.println("Error");
   digitalWrite(error, HIGH);
   digitalWrite(on, LOW);
   digitalWrite(off, LOW);
   digitalWrite(fan,LOW);
   return;
  }

  //System switch on and off
  powerStateLast = powerStateCurrent;
  powerStateCurrent = digitalRead(power);
if(powerStateCurrent == HIGH && powerStateLast == LOW){ //using a pull down resistor button to toggle the system state
  systemState = !systemState;  
}

if(systemState == 0){
  digitalWrite(off,HIGH);
  digitalWrite(on,LOW);
  digitalWrite(fan,LOW);
  lcd.noDisplay();
}
else{
  digitalWrite(on,HIGH);
  digitalWrite(off,LOW);
  lcd.display();
  return;
}

}
